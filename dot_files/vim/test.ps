%!PS-Adobe-3.0
%%Title: doc/omnicppcomplete.txt
%%For: cpittman
%%Creator: VIM - Vi IMproved 7.3 (2010 Aug 15)
%%CreationDate: Thu Jan 17 18:27:12 2013
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 30 42 577 752
%%DocumentMedia: letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: letter
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim73/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim73/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
612 792 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 1)30.6 744.9 ms
F0 sf
(*)30.6 724.9 ms
F1 sf
0.498 0 0.498 r
(omnicppcomplete.txt)s
F0 sf
0 g
(*   Plugin for C/C++ omnicompletion)s
(*)30.6 714.9 ms
F1 sf
0.498 0 0.498 r
(omnicppcomplete)s
F0 sf
0 g
(*)s
(Author: Vissale NEANG \(fromtonrouge AT gmail DOT com\))30.6 694.9 ms
(Last Change: 26 sept. 2007       )30.6 684.9 ms
(OmniCppComplete version 0.41)30.6 664.9 ms
(For )30.6 644.9 ms
F1 sf
0 0.498 0.498 r
(Vim version 7.0)s
F0 sf
0 g
( and above)s
F1 sf
0 0 0.498 r
(==============================================================================)30.6 624.9 ms
F0 sf
0 g
(1. Overview                                     |)30.6 604.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-overview)s
F0 sf
0 g
(|)s
(2. Downloads                                    |)30.6 594.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-download)s
F0 sf
0 g
(|)s
(3. Installation                                 |)30.6 584.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-installation)s
F0 sf
0 g
(|)s
(4. Options                                      |)30.6 574.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-options)s
F0 sf
0 g
(|)s
(5. Features                                     |)30.6 564.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-features)s
F0 sf
0 g
(|)s
(6. Limitations                                  |)30.6 554.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-limitations)s
F0 sf
0 g
(|)s
(7. FAQ & TIPS                                   |)30.6 544.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-faq)s
F0 sf
0 g
(|)s
(8. History                                      |)30.6 534.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-history)s
F0 sf
0 g
(|)s
(9. Thanks                                       |)30.6 524.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-thanks)s
F0 sf
0 g
(|)s
F1 sf
0 0 0.498 r
(==============================================================================)30.6 504.9 ms
(1. Overview)30.6 494.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                )30.6 484.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-overview)s
F0 sf
0 g
(*)s
(The purpose of this script is to provide an )30.6 474.9 ms
F1 sf
0 0.498 0 r
('omnifunc')s
F0 sf
0 g
( function for C and C++)s
(language. In a C++ file, while in insert mode, you can use )30.6 464.9 ms
0.498 0 0.498 r
(CTRL-X)s
0 g
( )s
0.498 0 0.498 r
(CTRL-O)s
0 g
( to:)s
F1 sf
0.498 0.498 0 r
(        )30.6 444.9 ms
F0 sf
0 g
(* Complete namespaces, classes, structs and unions)s
F1 sf
0.498 0.498 0 r
(        )30.6 434.9 ms
F0 sf
0 g
(* Complete attribute members and return type of functions)s
F1 sf
0.498 0.498 0 r
(        )30.6 424.9 ms
F0 sf
0 g
(* Complete the "this" pointer)s
F1 sf
0.498 0.498 0 r
(        )30.6 414.9 ms
F0 sf
0 g
(* Complete an object after a cast \(C and C++ cast\))s
F1 sf
0.498 0.498 0 r
(        )30.6 404.9 ms
F0 sf
0 g
(* Complete typedefs and anonymous types)s
(You can set a "may complete" behaviour to start a completion automatically)30.6 384.9 ms
(after a '.', '->' or '::'. Please see |)30.6 374.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-may-complete)s
F0 sf
0 g
(| for more details.)s
(The script needs an |)30.6 354.9 ms
F1 sf
0 0.498 0.498 r
(Exuberant_ctags)s
F0 sf
0 g
(| database to work properly.)s
F1 sf
0 0 0.498 r
(==============================================================================)30.6 334.9 ms
(2. Downloads)30.6 324.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                )30.6 314.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-download)s
F0 sf
0 g
(*)s
(You can download the latest release of the script from this url :)30.6 304.9 ms
(        )30.6 284.9 ms
F1 sf
0.498 0 0.498 r
(http://www.vim.org/scripts/script.php?script_id=1520)s
F0 sf
0 g
(You can download |)30.6 264.9 ms
F1 sf
0 0.498 0.498 r
(Exuberant_ctags)s
F0 sf
0 g
(| from :)s
(        )30.6 244.9 ms
F1 sf
0.498 0 0.498 r
(http://ctags.sourceforge.net)s
0 0 0.498 r
(==============================================================================)30.6 224.9 ms
(3. Installation)30.6 214.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                )30.6 204.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-installation)s
F0 sf
0 g
(*)s
F1 sf
0 0 0.498 r
(3.1. Script installation)30.6 194.9 ms
F0 sf
0 g
(~)s
(Unzip the downloaded file in your personal |)30.6 174.9 ms
F1 sf
0 0.498 0.498 r
(vimfiles)s
F0 sf
0 g
(| directory \(~/.vim under )s
(unix or %HOMEPATH%\\vimfiles under windows\). The )30.6 164.9 ms
F1 sf
0 0.498 0 r
('omnifunc')s
F0 sf
0 g
( will be )s
(automatically set for C and C++ files.)30.6 154.9 ms
(You also have to enable plugins by adding these two lines in your|)30.6 134.9 ms
F1 sf
0 0.498 0.498 r
(.vimrc)s
F0 sf
0 g
(|file: >)s
0 0.498 0.498 r
(        set nocp)30.6 114.9 ms
(        filetype plugin on)30.6 104.9 ms
0 g
(<)30.6 94.9 ms
(Please see |)30.6 84.9 ms
F1 sf
0 0.498 0.498 r
(cp)s
F0 sf
0 g
(| and |)s
F1 sf
0 0.498 0.498 r
(filetype-plugin-on)s
F0 sf
0 g
(| sections for more details.)s
F1 sf
0 0 0.498 r
(3.1.1. Files)30.6 64.9 ms
F0 sf
0 g
(~)s
(After installation you should find these files :)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 2)30.6 744.9 ms
F0 sf
(    after\\ftplugin\\cpp.vim)30.6 714.9 ms
(    after\\ftplugin\\c.vim)30.6 704.9 ms
(    autoload\\omni\\common\\debug.vim)30.6 684.9 ms
(                        \\utils.vim)30.6 674.9 ms
(    autoload\\omni\\cpp\\complete.vim)30.6 654.9 ms
(                     \\includes.vim)30.6 644.9 ms
(                     \\items.vim)30.6 634.9 ms
(                     \\maycomplete.vim)30.6 624.9 ms
(                     \\namespaces.vim)30.6 614.9 ms
(                     \\settings.vim)30.6 604.9 ms
(                     \\tokenizer.vim)30.6 594.9 ms
(                     \\utils.vim)30.6 584.9 ms
(    doc\\omnicppcomplete.txt)30.6 564.9 ms
F1 sf
0 0 0.498 r
(3.2. Building the Exuberant Ctags database)30.6 544.9 ms
F0 sf
0 g
(~)s
(To extract C/C++ symbols information, the script needs an |)30.6 524.9 ms
F1 sf
0 0.498 0.498 r
(Exuberant_ctags)s
F0 sf
0 g
(|)s
(database.)30.6 514.9 ms
(You have to build your database with at least the following options:)30.6 494.9 ms
(        --c++-kinds=+p  : Adds prototypes in the database for C/C++ files.)30.6 484.9 ms
(        --fields=+iaS   : Adds inheritance \(i\), access \(a\) and function )30.6 474.9 ms
(                          signatures \(S\) information.)30.6 464.9 ms
(        --extra=+q      : Adds context to the tag name. Note: Without this)30.6 454.9 ms
(                          option, the script cannot get class members.)30.6 444.9 ms
(Thus to build recursively a ctags database from the current directory, the)30.6 424.9 ms
(command looks like this:)30.6 414.9 ms
(>)30.6 404.9 ms
0 0.498 0.498 r
(        ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .)30.6 394.9 ms
0 g
(<)30.6 384.9 ms
(You can add a map in your |)30.6 374.9 ms
F1 sf
0 0.498 0.498 r
(.vimrc)s
F0 sf
0 g
(| file, eg: >)s
0 0.498 0.498 r
(        map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>)30.6 354.9 ms
0 g
(<)30.6 344.9 ms
(Or you can add these options in your ctags config file \(~/.ctags under unix or)30.6 334.9 ms
(%HOMEPATH%\\ctags.cnf under windows\) and execute the command : >)30.6 324.9 ms
0 0.498 0.498 r
(        :!ctags -R .)30.6 304.9 ms
0 g
(<)30.6 294.9 ms
(If your project contains files of other languages you may add the following)30.6 284.9 ms
(options:)30.6 274.9 ms
(        --languages=c++ : Builds only the tags for C++ files.)30.6 264.9 ms
(If your project contains macros you may also use the -I option.)30.6 244.9 ms
(Please read the ctags help or ctags man page for more details.)30.6 224.9 ms
F1 sf
0 0 0.498 r
(3.3. Setting the 'tags' option)30.6 204.9 ms
F0 sf
0 g
(~)s
(The default value of the option )30.6 184.9 ms
F1 sf
0 0.498 0 r
('tags')s
F0 sf
0 g
( is "./tags,tags" \("./tags,./TAGS,tags,TAGS")s
(when |)30.6 174.9 ms
F1 sf
0 0.498 0.498 r
(+emacs_tags)s
F0 sf
0 g
(| is enabled\), if you build your tag database with the cmd above,)s
(you normally don't have to change this setting \(The cmd used above generates a )30.6 164.9 ms
(file with the name "tags"\). In this case your current working directory must be )30.6 154.9 ms
(the directory where the tags file reside.)30.6 144.9 ms
(Note:   When |)30.6 124.9 ms
F1 sf
0 0.498 0.498 r
(+emacs_tags)s
F0 sf
0 g
(| is enabled, the script may display members twice, it's )s
(        recommended to set tags to "./tags,tags' or "./TAGS,TAGS".)30.6 114.9 ms
(If your tags file is not named "tags" you have to add it in the )30.6 94.9 ms
F1 sf
0 0.498 0 r
('tags')s
F0 sf
0 g
(option eg: >)30.6 84.9 ms
0 0.498 0.498 r
(        set tags+=/usr/tagsdir/mytagfile       )30.6 64.9 ms
0 g
(<)30.6 54.9 ms
(You can ensure that the )30.6 44.9 ms
F1 sf
0 0.498 0 r
('tags')s
F0 sf
0 g
( option is set properly by executing the following)s
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 3)30.6 744.9 ms
F0 sf
(command: >)30.6 724.9 ms
0 0.498 0.498 r
(        :tselect MyClass)30.6 704.9 ms
0 g
(<)30.6 694.9 ms
(Where MyClass is a class of your project. This command should display all )30.6 684.9 ms
(possible tags for the type MyClass.)30.6 674.9 ms
F1 sf
0 0 0.498 r
(3.4. Simple test)30.6 654.9 ms
F0 sf
0 g
(~)s
(Now you can do a simple test. Edit a C++ file and write the simplest case : >)30.6 634.9 ms
0 0.498 0.498 r
(        MyClass myObject;)30.6 614.9 ms
(        myObject.<C-X><C-O>)30.6 604.9 ms
0 g
(<)30.6 594.9 ms
(You should see class members of MyClass.)30.6 584.9 ms
F1 sf
0 0 0.498 r
(==============================================================================)30.6 564.9 ms
(4. Options)30.6 554.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                )30.6 544.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-options)s
F0 sf
0 g
(*)s
(You can change completion behaviour by setting script options in your |)30.6 524.9 ms
F1 sf
0 0.498 0.498 r
(.vimrc)s
F0 sf
0 g
(|)s
(configuration file.)30.6 514.9 ms
F1 sf
0 0 0.498 r
(4.1. Global scope search toggle)30.6 494.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 484.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_GlobalScopeSearch)s
F0 sf
0 g
(*)s
(You can enable/disable the global scope search by setting the)30.6 464.9 ms
(OmniCpp_GlobalScopeSearch option.)30.6 454.9 ms
(Possible values are : )30.6 434.9 ms
(        0 = disabled)30.6 424.9 ms
(        1 = enabled)30.6 414.9 ms
(        [default=1] >)30.6 404.9 ms
0 0.498 0.498 r
(        let OmniCpp_GlobalScopeSearch = 1)30.6 384.9 ms
0 g
(<        )30.6 374.9 ms
F1 sf
0 0 0.498 r
(4.2. Namespace search method)30.6 364.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 354.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_NamespaceSearch)s
F0 sf
0 g
(*)s
(You can change the 'using namespace' search behaviour by setting the)30.6 334.9 ms
(OmniCpp_NamespaceSearch option.)30.6 324.9 ms
(Possible values are :)30.6 304.9 ms
(        0 = namespaces disabled)30.6 294.9 ms
(        1 = search namespaces in the current buffer)30.6 284.9 ms
(        2 = search namespaces in the current buffer and in included files)30.6 274.9 ms
(        [default=1] >)30.6 264.9 ms
0 0.498 0.498 r
(        )30.6 254.9 ms
(        let OmniCpp_NamespaceSearch = 1)30.6 244.9 ms
0 g
(<)30.6 234.9 ms
(When OmniCpp_NamespaceSearch is 2, "using namespace" declarations are parsed)30.6 224.9 ms
(in the current buffer and also in included files. To find included files, the)30.6 214.9 ms
(script use the vim env )30.6 204.9 ms
F1 sf
0 0.498 0 r
('path')s
F0 sf
0 g
(, so you have to set it properly.)s
(Note: included files are searched with lvimgrep, thus the location list of the)30.6 184.9 ms
(current window is changed.)30.6 174.9 ms
(Note: When the )30.6 154.9 ms
F1 sf
0 0.498 0 r
('filetype')s
F0 sf
0 g
( is "c", namespace search is always disabled even if)s
(OmniCpp_NamespaceSearch != 0)30.6 144.9 ms
F1 sf
0 0 0.498 r
(4.3. Class scope completion mode)30.6 124.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 114.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_DisplayMode)s
F0 sf
0 g
(*)s
(When you are completing a class scope \(eg: MyClass::)30.6 94.9 ms
0.498 0 0.498 r
(<C-X><C-O>)s
0 g
(\), depending on)s
(the current scope, you may see sometimes static, public, protected or private)30.6 84.9 ms
(members and sometimes you may see all members. By default the choice is done )30.6 74.9 ms
(automatically by the script but you can override it with the )30.6 64.9 ms
(OmniCpp_DisplayMode option.)30.6 54.9 ms
re sp
%%PageTrailer
%%Page: 4 4
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 4)30.6 744.9 ms
F0 sf
(Note: This option can be use when you have friend classes in your project \(the )30.6 724.9 ms
(script does not support friend classes\).)30.6 714.9 ms
(Possible values are :)30.6 694.9 ms
(        0 = auto)30.6 684.9 ms
(        1 = always show all members)30.6 674.9 ms
(        [default=0] >)30.6 664.9 ms
0 0.498 0.498 r
(        let OmniCpp_DisplayMode = 0)30.6 644.9 ms
0 g
(<)30.6 634.9 ms
F1 sf
0 0 0.498 r
(4.4. Show scope in abbreviation)30.6 624.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 614.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_ShowScopeInAbbr)s
F0 sf
0 g
(*)s
(By default, in the |)30.6 594.9 ms
F1 sf
0 0.498 0.498 r
(omnicpp-popup)s
F0 sf
0 g
(| menu, you will see the scope of a match in )s
(the last column. You can remove this column and add the scope at the beginning)30.6 584.9 ms
(of match abbreviation.)30.6 574.9 ms
(eg: )30.6 564.9 ms
(OmniCpp_ShowScopeInAbbr = 0)30.6 544.9 ms
(        +-------------------------------------+)30.6 534.9 ms
(        |method1\(   f  +  MyNamespace::MyClass|)30.6 524.9 ms
(        |_member1   m  +  MyNamespace::MyClass|)30.6 514.9 ms
(        |_member2   m  #  MyNamespace::MyClass|)30.6 504.9 ms
(        |_member3   m  -  MyNamespace::MyClass|)30.6 494.9 ms
(        +-------------------------------------+)30.6 484.9 ms
(OmniCpp_ShowScopeInAbbr = 1)30.6 464.9 ms
(        +-------------------------------------+)30.6 454.9 ms
(        |MyNamespace::MyClass::method1\(   f + |)30.6 444.9 ms
(        |MyNamespace::MyClass::_member1   m + |)30.6 434.9 ms
(        |MyNamespace::MyClass::_member2   m # |)30.6 424.9 ms
(        |MyNamespace::MyClass::_member3   m - |)30.6 414.9 ms
(        +-------------------------------------+)30.6 404.9 ms
(Possible values are :)30.6 384.9 ms
(        0 = don't show scope in abbreviation)30.6 374.9 ms
(        1 = show scope in abbreviation and remove the last column)30.6 364.9 ms
(        [default=0] >)30.6 354.9 ms
0 0.498 0.498 r
(        let OmniCpp_ShowScopeInAbbr = 0)30.6 334.9 ms
0 g
(<)30.6 324.9 ms
F1 sf
0 0 0.498 r
(4.5. Show prototype in abbreviation)30.6 314.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 304.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_ShowPrototypeInAbbr)s
F0 sf
0 g
(*)s
(This option allows to display the prototype of a function in the abbreviation)30.6 284.9 ms
(part of the popup menu.)30.6 274.9 ms
(Possible values are:)30.6 254.9 ms
(        0 = don't display prototype in abbreviation)30.6 244.9 ms
(        1 = display prototype in abbreviation)30.6 234.9 ms
(        [default=0] >)30.6 224.9 ms
0 0.498 0.498 r
(        )30.6 214.9 ms
(        let OmniCpp_ShowPrototypeInAbbr = 0)30.6 204.9 ms
0 g
(<)30.6 194.9 ms
F1 sf
0 0 0.498 r
(4.6. Show access)30.6 184.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 174.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_ShowAccess)s
F0 sf
0 g
(*)s
(This option allows to show/hide the access information \('+', '#', '-'\) in the )30.6 154.9 ms
(popup menu.)30.6 144.9 ms
(Possible values are:)30.6 124.9 ms
(        0 = hide access)30.6 114.9 ms
(        1 = show access)30.6 104.9 ms
(        [default=1] >)30.6 94.9 ms
0 0.498 0.498 r
(        )30.6 84.9 ms
(        let OmniCpp_ShowAccess = 1)30.6 74.9 ms
F1 sf
0 0 0.498 r
(4.7. Default using namespace list)30.6 54.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 44.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_DefaultNamespaces)s
F0 sf
0 g
(*)s
re sp
%%PageTrailer
%%Page: 5 5
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 5)30.6 744.9 ms
F0 sf
(When |)30.6 714.9 ms
F1 sf
0 0.498 0.498 r
(OmniCpp_NamespaceSearch)s
F0 sf
0 g
(| is not 0, the script will parse using namespace)s
(declarations in the current buffer and maybe in included files.)30.6 704.9 ms
(You can specify manually a default namespace list if you want with the)30.6 694.9 ms
(OmniCpp_DefaultNamespaces option. Each item in the list is a namespace name.)30.6 684.9 ms
(eg: If you have)30.6 674.9 ms
(        let OmniCpp_DefaultNamespaces = ["std", "MyNamespace"])30.6 654.9 ms
(    It will be the same as inserting this declarations at the top of the)30.6 634.9 ms
(    current buffer :)30.6 624.9 ms
(        using namespace std;)30.6 604.9 ms
(        using namespace MyNamespace;)30.6 594.9 ms
(This option can be use if you don't want to parse using namespace declarations)30.6 574.9 ms
(in included files and want to add namespaces that are always used in your)30.6 564.9 ms
(project.)30.6 554.9 ms
(Possible values are : )30.6 534.9 ms
(        List of String)30.6 524.9 ms
(        [default=[]] >)30.6 514.9 ms
0 0.498 0.498 r
(        let OmniCpp_DefaultNamespaces = [])30.6 494.9 ms
0 g
(<)30.6 484.9 ms
F1 sf
0 0 0.498 r
(4.8.    May complete behaviour)30.6 474.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 464.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-may-complete)s
F0 sf
0 g
(*)s
(This feature allows you to run automatically a completion after a '.', '->' )30.6 444.9 ms
(or '::'. By default, the "may complete" feature is set automatically for '.' )30.6 434.9 ms
(and '->'. The reason to not set this feature for the scope operator '::' is )30.6 424.9 ms
(sometimes you don't want to complete a namespace that contains many members.)30.6 414.9 ms
(To enable/disable the "may complete" behaviour for dot, arrow and scope)30.6 394.9 ms
(operator, you can change the option OmniCpp_MayCompleteDot,)30.6 384.9 ms
(OmniCpp_MayCompleteArrow and OmniCpp_MayCompleteScope respectively.)30.6 374.9 ms
F1 sf
0.498 0.498 0 r
(                                        )30.6 354.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_MayCompleteDot)s
F0 sf
0 g
(*)s
(Possible values are :)30.6 344.9 ms
(        0 = May complete disabled for dot)30.6 334.9 ms
(        1 = May complete enabled for dot)30.6 324.9 ms
(        [default=1] >)30.6 314.9 ms
0 0.498 0.498 r
(        let OmniCpp_MayCompleteDot = 1)30.6 294.9 ms
0 g
(<)30.6 284.9 ms
F1 sf
0.498 0.498 0 r
(                                        )30.6 274.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_MayCompleteArrow)s
F0 sf
0 g
(*)s
(Possible values are :)30.6 264.9 ms
(        0 = May complete disabled for arrow)30.6 254.9 ms
(        1 = May complete enabled for arrow)30.6 244.9 ms
(        [default=1] >)30.6 234.9 ms
0 0.498 0.498 r
(        let OmniCpp_MayCompleteArrow = 1)30.6 214.9 ms
0 g
(<)30.6 204.9 ms
F1 sf
0.498 0.498 0 r
(                                        )30.6 194.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_MayCompleteScope)s
F0 sf
0 g
(*)s
(Possible values are :)30.6 184.9 ms
(        0 = May complete disabled for scope)30.6 174.9 ms
(        1 = May complete enabled for scope)30.6 164.9 ms
(        [default=0] >)30.6 154.9 ms
0 0.498 0.498 r
(        let OmniCpp_MayCompleteScope = 0)30.6 134.9 ms
0 g
(<)30.6 124.9 ms
(Note: You can obviously continue to use )30.6 104.9 ms
0.498 0 0.498 r
(<C-X><C-O>)s
F1 sf
0 0 0.498 r
(4.9. Select/Don't select first popup item)30.6 84.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 74.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_SelectFirstItem)s
F0 sf
0 g
(*)s
(Note: This option is only used when )30.6 54.9 ms
F1 sf
0 0.498 0 r
('completeopt')s
F0 sf
0 g
( does not contain "longest".)s
re sp
%%PageTrailer
%%Page: 6 6
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 6)30.6 744.9 ms
F0 sf
(When )30.6 724.9 ms
F1 sf
0 0.498 0 r
('completeopt')s
F0 sf
0 g
( does not contain "longest", Vim automatically select the)s
(first entry of the popup menu. You can change this behaviour with the)30.6 714.9 ms
(OmniCpp_SelectFirstItem option.)30.6 704.9 ms
(Possible values are:)30.6 684.9 ms
(        0 = don't select first popup item)30.6 674.9 ms
(        1 = select first popup item \(inserting it to the text\))30.6 664.9 ms
(        2 = select first popup item \(without inserting it to the text\))30.6 654.9 ms
(        [default=0] >)30.6 644.9 ms
0 0.498 0.498 r
(        )30.6 634.9 ms
(        let OmniCpp_SelectFirstItem = 0)30.6 624.9 ms
F1 sf
0 0 0.498 r
(4.10 Use local search function for variable definitions)30.6 604.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                        )30.6 594.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(OmniCpp_LocalSearchDecl)s
F0 sf
0 g
(*)s
(The internal search function for variable definitions of vim requires that the)30.6 574.9 ms
(enclosing braces of the function are located in the first column. You can)30.6 564.9 ms
(change this behaviour with the OmniCpp_LocalSearchDecl option. The local)30.6 554.9 ms
(version works irrespective the position of braces.)30.6 544.9 ms
(Possible values are:)30.6 524.9 ms
(        0 = use standard vim search function)30.6 514.9 ms
(        1 = use local search function)30.6 504.9 ms
(        [default=0] >)30.6 494.9 ms
F1 sf
0 0 0.498 r
(==============================================================================)30.6 474.9 ms
(5. Features)30.6 464.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                )30.6 454.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-features)s
F0 sf
0 g
(*)s
F1 sf
0 0 0.498 r
(5.1.  Popup menu)30.6 444.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                )30.6 434.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-popup)s
F0 sf
0 g
(*)s
(Popup menu format:)30.6 424.9 ms
(        +-------------------------------------+)30.6 414.9 ms
(        |method1\(   f  +  MyNamespace::MyClass|)30.6 404.9 ms
(        |_member1   m  +  MyNamespace::MyClass|)30.6 394.9 ms
(        |_member2   m  #  MyNamespace::MyClass|)30.6 384.9 ms
(        |_member3   m  -  MyNamespace::MyClass|)30.6 374.9 ms
(        +-------------------------------------+)30.6 364.9 ms
(            ^       ^  ^          ^)30.6 354.9 ms
(           \(1\)     \(2\)\(3\)        \(4\))30.6 344.9 ms
(\(1\) name of the symbol, when a match ends with '\(' it's a function.)30.6 324.9 ms
(\(2\) kind of the symbol, possible kinds are :)30.6 304.9 ms
F1 sf
0.498 0.498 0 r
(        )30.6 294.9 ms
F0 sf
0 g
(* c = classes)s
F1 sf
0.498 0.498 0 r
(        )30.6 284.9 ms
F0 sf
0 g
(* d = macro definitions)s
F1 sf
0.498 0.498 0 r
(        )30.6 274.9 ms
F0 sf
0 g
(* e = enumerators \(values inside an enumeration\))s
F1 sf
0.498 0.498 0 r
(        )30.6 264.9 ms
F0 sf
0 g
(* f = function definitions)s
F1 sf
0.498 0.498 0 r
(        )30.6 254.9 ms
F0 sf
0 g
(* g = enumeration names)s
F1 sf
0.498 0.498 0 r
(        )30.6 244.9 ms
F0 sf
0 g
(* m = class, struct, and union members)s
F1 sf
0.498 0.498 0 r
(        )30.6 234.9 ms
F0 sf
0 g
(* n = namespaces)s
F1 sf
0.498 0.498 0 r
(        )30.6 224.9 ms
F0 sf
0 g
(* p = function prototypes)s
F1 sf
0.498 0.498 0 r
(        )30.6 214.9 ms
F0 sf
0 g
(* s = structure names)s
F1 sf
0.498 0.498 0 r
(        )30.6 204.9 ms
F0 sf
0 g
(* t = typedefs)s
F1 sf
0.498 0.498 0 r
(        )30.6 194.9 ms
F0 sf
0 g
(* u = union names)s
F1 sf
0.498 0.498 0 r
(        )30.6 184.9 ms
F0 sf
0 g
(* v = variable definitions)s
(\(3\) access, possible values are :)30.6 164.9 ms
F1 sf
0.498 0.498 0 r
(        )30.6 154.9 ms
F0 sf
0 g
(* + = public)s
F1 sf
0.498 0.498 0 r
(        )30.6 144.9 ms
F0 sf
0 g
(* # = protected)s
F1 sf
0.498 0.498 0 r
(        )30.6 134.9 ms
F0 sf
0 g
(* - = private)s
(Note: enumerators have no access information)30.6 124.9 ms
(\(4\) scope where the symbol is defined.)30.6 104.9 ms
(Note: If the scope is empty it's a global symbol)30.6 94.9 ms
(Note: anonymous scope may end with  __anon[number])30.6 84.9 ms
(eg: If you have an anonymous enum in MyNamespace::MyClass : >)30.6 74.9 ms
0 0.498 0.498 r
(        namespace MyNamespace)30.6 54.9 ms
(        {)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 7 7
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 7)30.6 744.9 ms
F0 sf
0 0.498 0.498 r
(            class MyClass)30.6 724.9 ms
(            {)30.6 714.9 ms
(                private:)30.6 704.9 ms
(                enum)30.6 684.9 ms
(                {)30.6 674.9 ms
(                    E_ENUM0,)30.6 664.9 ms
(                    E_ENUM1,)30.6 654.9 ms
(                    E_ENUM2)30.6 644.9 ms
(                };)30.6 634.9 ms
(            };)30.6 624.9 ms
(        })30.6 614.9 ms
0 g
(<)30.6 604.9 ms
(You should see :)30.6 584.9 ms
(        +----------------------------------------------+)30.6 564.9 ms
(        |E_ENUM0    e     MyNamespace::MyClass::__anon1|)30.6 554.9 ms
(        |E_ENUM1    e     MyNamespace::MyClass::__anon1|)30.6 544.9 ms
(        |E_ENUM2    e     MyNamespace::MyClass::__anon1|)30.6 534.9 ms
(        +----------------------------------------------+)30.6 524.9 ms
(                                                   ^)30.6 514.9 ms
(                                              __anon[number])30.6 504.9 ms
F1 sf
0 0 0.498 r
(5.2.  Global scope completion)30.6 484.9 ms
F0 sf
0 g
(~)s
(The global scope completion allows you to complete global symbols for the base )30.6 464.9 ms
(you are currently typing. The base can start with '::' or not.)30.6 454.9 ms
(Note: Global scope completion only works with a non empty base, if you run a)30.6 444.9 ms
(completion just after a '::' the completion will fail. The reason is that if)30.6 434.9 ms
(there is no base to complete the script will try to display all the tags in)30.6 424.9 ms
(the database. For small project it could be not a problem but for others you)30.6 414.9 ms
(may wait 5 minutes or more for a result.)30.6 404.9 ms
(eg1 : >)30.6 384.9 ms
0 0.498 0.498 r
(        pthread_cr<C-X><C-O>    =>      pthread_create)30.6 364.9 ms
0 g
(<)30.6 354.9 ms
(Where pthread_create is a global function.)30.6 344.9 ms
(eg2: >)30.6 334.9 ms
0 0.498 0.498 r
(        ::globa<C-X><C-O>       =>     ::global_func\()30.6 324.9 ms
(                                        +----------------+)30.6 314.9 ms
(                                        |global_func\(   f|)30.6 304.9 ms
(                                        |global_var1    v|)30.6 294.9 ms
(                                        |global_var2    v|)30.6 284.9 ms
(                                        +----------------+)30.6 274.9 ms
0 g
(<)30.6 264.9 ms
(Where global_var1, global_var2 and global_func are global symbols)30.6 254.9 ms
(eg3: >)30.6 244.9 ms
0 0.498 0.498 r
(        ::<C-X><C-O>            =>      [NO MATCH])30.6 234.9 ms
0 g
(<)30.6 224.9 ms
(No match because a global completion from an empty base is not allowed.)30.6 214.9 ms
F1 sf
0 0 0.498 r
(5.3.  Namespace scope completion)30.6 194.9 ms
F0 sf
0 g
(~)s
(You can complete namespace members after a 'MyNamespace::'. Contrary to global)30.6 174.9 ms
(scope completion you can run a completion from an empty base.)30.6 164.9 ms
(Possible members are:)30.6 154.9 ms
F1 sf
0.498 0.498 0 r
(        )30.6 144.9 ms
F0 sf
0 g
(* Namespaces)s
F1 sf
0.498 0.498 0 r
(        )30.6 134.9 ms
F0 sf
0 g
(* Classes)s
F1 sf
0.498 0.498 0 r
(        )30.6 124.9 ms
F0 sf
0 g
(* Structs)s
F1 sf
0.498 0.498 0 r
(        )30.6 114.9 ms
F0 sf
0 g
(* Unions)s
F1 sf
0.498 0.498 0 r
(        )30.6 104.9 ms
F0 sf
0 g
(* Enums)s
F1 sf
0.498 0.498 0 r
(        )30.6 94.9 ms
F0 sf
0 g
(* Functions)s
F1 sf
0.498 0.498 0 r
(        )30.6 84.9 ms
F0 sf
0 g
(* Variables)s
F1 sf
0.498 0.498 0 r
(        )30.6 74.9 ms
F0 sf
0 g
(* Typedefs)s
(eg: >)30.6 54.9 ms
0 0.498 0.498 r
(        MyNamespace::<C-X><C-O>)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 8 8
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 8)30.6 744.9 ms
F0 sf
0 0.498 0.498 r
(                    +--------------------------------+)30.6 724.9 ms
(                    |E_ENUM0            e MyNamespace|)30.6 714.9 ms
(                    |E_ENUM1            e MyNamespace|)30.6 704.9 ms
(                    |E_ENUM2            e MyNamespace|)30.6 694.9 ms
(                    |MyClass            c MyNamespace|)30.6 684.9 ms
(                    |MyEnum             g MyNamespace|)30.6 674.9 ms
(                    |MyStruct           s MyNamespace|)30.6 664.9 ms
(                    |MyUnion            u MyNamespace|)30.6 654.9 ms
(                    |SubNamespace       n MyNamespace|)30.6 644.9 ms
(                    |doSomething\(       f MyNamespace|)30.6 634.9 ms
(                    |myVar              v MyNamespace|)30.6 624.9 ms
(                    |something_t        t MyNamespace|)30.6 614.9 ms
(                    +--------------------------------+)30.6 604.9 ms
F1 sf
0 0 0.498 r
(5.4.  Class scope completion)30.6 584.9 ms
F0 sf
0 g
(~)s
(You can complete class members after a 'MyClass::'. Contrary to global scope)30.6 564.9 ms
(completion you can run a completion from an empty base.)30.6 554.9 ms
(By default, there is two behaviours for class scope completion.)30.6 544.9 ms
(        a\) Completion of a base class of the current class scope)30.6 524.9 ms
(        When you are completing a base class of the current class scope, you)30.6 504.9 ms
(        will see all members of this class in the popup menu.)30.6 494.9 ms
(        eg: >)30.6 484.9 ms
0 0.498 0.498 r
(        class A)30.6 464.9 ms
(        {)30.6 454.9 ms
(        public:)30.6 444.9 ms
(            enum)30.6 434.9 ms
(            {)30.6 424.9 ms
(                E_ENUM0,)30.6 414.9 ms
(                E_ENUM1,)30.6 404.9 ms
(                E_ENUM2,)30.6 394.9 ms
(            };)30.6 384.9 ms
(            void func1\(\);)30.6 364.9 ms
(            static int _staticMember;)30.6 354.9 ms
(            )30.6 344.9 ms
(        private:)30.6 334.9 ms
(            int _member;)30.6 324.9 ms
(        };)30.6 314.9 ms
(        class B : public A)30.6 294.9 ms
(        {)30.6 284.9 ms
(        public:)30.6 274.9 ms
(            void doSomething\(\);)30.6 264.9 ms
(        };)30.6 254.9 ms
(        void MyClassB::doSomething\(\))30.6 224.9 ms
(        {)30.6 214.9 ms
(            MyClassA::<C-X><C-O>)30.6 204.9 ms
(                     +---------------------------+)30.6 194.9 ms
(                     |E_ENUM0        e   MyClassA|)30.6 184.9 ms
(                     |E_ENUM1        e   MyClassA|)30.6 174.9 ms
(                     |E_ENUM2        e   MyClassA|)30.6 164.9 ms
(                     |func1\(         f + MyClassA|)30.6 154.9 ms
(                     |_member        m - MyClassA|)30.6 144.9 ms
(                     |_staticMember  m + MyClassA|)30.6 134.9 ms
(                     +---------------------------+)30.6 124.9 ms
(        })30.6 114.9 ms
0 g
(<)30.6 104.9 ms
(        b\) Completion of a non base class of the current class scope)30.6 84.9 ms
(        When you are completing a class that is not a base class of the)30.6 64.9 ms
(        current class you will see only enumerators and static members.)30.6 54.9 ms
(        eg: >)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 9 9
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                              Page 9)30.6 744.9 ms
F0 sf
0 0.498 0.498 r
(        class C)30.6 714.9 ms
(        {)30.6 704.9 ms
(        public:)30.6 694.9 ms
(            void doSomething\(\);)30.6 684.9 ms
(        };)30.6 674.9 ms
(        void MyClassC::doSomething\(\))30.6 654.9 ms
(        {)30.6 644.9 ms
(            MyClassA::<C-X><C-O>)30.6 634.9 ms
(                     +---------------------------+)30.6 624.9 ms
(                     |E_ENUM0        e   MyClassA|)30.6 614.9 ms
(                     |E_ENUM1        e   MyClassA|)30.6 604.9 ms
(                     |E_ENUM2        e   MyClassA|)30.6 594.9 ms
(                     |_staticMember  m + MyClassA|)30.6 584.9 ms
(                     +---------------------------+)30.6 574.9 ms
(        })30.6 564.9 ms
0 g
(<)30.6 554.9 ms
(You can override the default behaviour by setting the)30.6 544.9 ms
(|)30.6 534.9 ms
F1 sf
0 0.498 0.498 r
(OmniCpp_DisplayMode)s
F0 sf
0 g
(| option.)s
F1 sf
0 0 0.498 r
(5.5.  Current scope completion)30.6 514.9 ms
F0 sf
0 g
(~)s
(When you start a completion from an empty instruction you are in "Current)30.6 494.9 ms
(scope completion" mode. You will see possible members of each context in )30.6 484.9 ms
(the context stack.)30.6 474.9 ms
(eg: >)30.6 464.9 ms
0 0.498 0.498 r
(        void MyClass::doSomething\(\))30.6 454.9 ms
(        {)30.6 444.9 ms
(            using namespace MyNamespace;)30.6 434.9 ms
(            using namespace SubNamespace;)30.6 424.9 ms
(            // You will see members of each context in the context stack)30.6 404.9 ms
(            // 1\) MyClass members)30.6 394.9 ms
(            // 2\) MyNamespace::SubNamespace members)30.6 384.9 ms
(            // 3\) MyNamespace members)30.6 374.9 ms
(            <C-X><C-O>)30.6 354.9 ms
(            +------------------------------------------+)30.6 344.9 ms
(            |_member1     m + MyClass                  |)30.6 334.9 ms
(            |_member2     m # MyClass                  |)30.6 324.9 ms
(            |func1\(       f   MyNamespace::SubNamespace|)30.6 314.9 ms
(            |var          v   MyNamespace::SubNamespace|)30.6 304.9 ms
(            |func1\(       f   MyNamespace              |)30.6 294.9 ms
(            |var          v   MyNamespace              |)30.6 284.9 ms
(            +------------------------------------------+)30.6 274.9 ms
(        })30.6 264.9 ms
0 g
(<)30.6 254.9 ms
F1 sf
0 0 0.498 r
(5.6.  Class, Struct and Union members completion)30.6 234.9 ms
F0 sf
0 g
(~)s
(You can complete members of class, struct and union instances after a '->' or)30.6 214.9 ms
('.'.)30.6 204.9 ms
(eg: >)30.6 194.9 ms
0 0.498 0.498 r
(        MyClass myObject;)30.6 184.9 ms
(        myObject.<C-X><C-O>)30.6 174.9 ms
(                +-----------------------+)30.6 164.9 ms
(                |_member1   m + MyClass |)30.6 154.9 ms
(                |_member2   m # MyClass |)30.6 144.9 ms
(                +-----------------------+)30.6 134.9 ms
0 g
(<)30.6 124.9 ms
F1 sf
0 0 0.498 r
(5.7.  Attribute members and returned type completion)30.6 104.9 ms
F0 sf
0 g
(~)s
(You can complete a class member or a return type of a function.)30.6 84.9 ms
(eg: >)30.6 74.9 ms
0 0.498 0.498 r
(        MyClass myObject;)30.6 64.9 ms
(        // Completion of the member _member1)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 10 10
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                             Page 10)30.6 744.9 ms
F0 sf
0 0.498 0.498 r
(        myObject._member1-><C-X><C-O>)30.6 724.9 ms
(                          +------------------------+)30.6 714.9 ms
(                          |get\(   m + AnotherClass1|)30.6 704.9 ms
(                          +------------------------+)30.6 694.9 ms
(        // Completion of the return type of the function get\(\))30.6 674.9 ms
(        myObject._member1->get\(\)-><C-X><C-O>)30.6 664.9 ms
(                                 +--------------------------+)30.6 654.9 ms
(                                 |_member1 m + AnotherClass2|)30.6 644.9 ms
(                                 |_member2 m # AnotherClass2|)30.6 634.9 ms
(                                 |_member3 m - AnotherClass2|)30.6 624.9 ms
(                                 +--------------------------+)30.6 614.9 ms
F1 sf
0 0 0.498 r
(5.8.  Anonymous type completion)30.6 594.9 ms
F0 sf
0 g
(~)s
(Note: To use this feature you need at least|)30.6 574.9 ms
F1 sf
0 0.498 0.498 r
(Exuberant_ctags)s
F0 sf
0 g
(| version 5.6)s
(You can complete an anonymous type like this : >)30.6 554.9 ms
0 0.498 0.498 r
(        struct)30.6 544.9 ms
(        {)30.6 534.9 ms
(            int a;)30.6 524.9 ms
(            int b;)30.6 514.9 ms
(            int c;)30.6 504.9 ms
(        }globalVar;)30.6 494.9 ms
(        void func\(\))30.6 474.9 ms
(        {)30.6 464.9 ms
(            globalVar.<C-X><C-O>)30.6 454.9 ms
(                     +---------------+)30.6 444.9 ms
(                     |a   m + __anon1|)30.6 434.9 ms
(                     |b   m + __anon1|)30.6 424.9 ms
(                     |c   m + __anon1|)30.6 414.9 ms
(                     +---------------+)30.6 404.9 ms
(        })30.6 394.9 ms
0 g
(<)30.6 384.9 ms
(Where globalVar is a global variable of an anonymous type)30.6 374.9 ms
F1 sf
0 0 0.498 r
(5.9.  Typedef completion)30.6 354.9 ms
F0 sf
0 g
(~)s
(You can complete a typedef. The typedef is resolved recursively, thus typedef)30.6 334.9 ms
(of typedef of... may not be a problem.)30.6 324.9 ms
(You can also complete a typedef of an anonymous type, eg : >)30.6 304.9 ms
0 0.498 0.498 r
(        typedef struct)30.6 294.9 ms
(        {)30.6 284.9 ms
(            int a;)30.6 274.9 ms
(            int b;)30.6 264.9 ms
(            int c;)30.6 254.9 ms
(        }something_t;)30.6 244.9 ms
(        something_t globalVar;)30.6 224.9 ms
(        void func\(\))30.6 204.9 ms
(        {)30.6 194.9 ms
(            globalVar.<C-X><C-O>)30.6 184.9 ms
(                     +---------------+)30.6 174.9 ms
(                     |a   m + __anon1|)30.6 164.9 ms
(                     |b   m + __anon1|)30.6 154.9 ms
(                     |c   m + __anon1|)30.6 144.9 ms
(                     +---------------+)30.6 134.9 ms
(        })30.6 124.9 ms
0 g
(<)30.6 114.9 ms
(Where globalVar is a global variable of typedef of an anonymous type.)30.6 104.9 ms
F1 sf
0 0 0.498 r
(5.10. Completion of the "this" pointer)30.6 84.9 ms
F0 sf
0 g
(~)s
(You can complete the "this" pointer.)30.6 64.9 ms
(eg: >)30.6 54.9 ms
0 0.498 0.498 r
(        this-><C-X><C-O>)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 11 11
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                             Page 11)30.6 744.9 ms
F0 sf
0 0.498 0.498 r
(             +-----------------------+)30.6 724.9 ms
(             |_member1   m + MyClass |)30.6 714.9 ms
(             |_member2   m # MyClass |)30.6 704.9 ms
(             +-----------------------+)30.6 694.9 ms
(        \(*this\).<C-X><C-O>)30.6 674.9 ms
(               +-----------------------+)30.6 664.9 ms
(               |_member1   m + MyClass |)30.6 654.9 ms
(               |_member2   m # MyClass |)30.6 644.9 ms
(               +-----------------------+)30.6 634.9 ms
0 g
(<)30.6 624.9 ms
F1 sf
0 0 0.498 r
(5.11.  Completion after a cast)30.6 604.9 ms
F0 sf
0 g
(~)s
(You can complete an object after a C or C++ cast.)30.6 584.9 ms
(eg: >)30.6 574.9 ms
0 0.498 0.498 r
(        // C cast style)30.6 564.9 ms
(        \(\(AnotherStruct*\)pStruct\)-><C-X><C-O>)30.6 554.9 ms
(        // C++ cast style)30.6 534.9 ms
(        static_cast<AnotherStruct*>\(pStruct\)-><C-X><C-O>)30.6 524.9 ms
0 g
(<)30.6 514.9 ms
F1 sf
0 0 0.498 r
(5.12. Preview window)30.6 494.9 ms
F0 sf
0 g
(~)s
(If the )30.6 474.9 ms
F1 sf
0 0.498 0 r
('completeopt')s
F0 sf
0 g
( option contains the setting "preview" \(this is the )s
(default value\), you will see a preview window during the completion.)30.6 464.9 ms
(This window shows useful information like function signature, filename where)30.6 454.9 ms
(the symbol is define etc...)30.6 444.9 ms
(The preview window contains tag information, the list below is non exhaustive.)30.6 424.9 ms
F1 sf
0.498 0.498 0 r
(        )30.6 404.9 ms
F0 sf
0 g
(* name : name of the tag)s
F1 sf
0.498 0.498 0 r
(        )30.6 394.9 ms
F0 sf
0 g
(* cmd : regexp or line number that helps to find the tag )s
F1 sf
0.498 0.498 0 r
(        )30.6 384.9 ms
F0 sf
0 g
(* signature : signature for prototypes and functions)s
F1 sf
0.498 0.498 0 r
(        )30.6 374.9 ms
F0 sf
0 g
(* kind : kind of the tag \(eg: namespace, class etc...\))s
F1 sf
0.498 0.498 0 r
(        )30.6 364.9 ms
F0 sf
0 g
(* access : access information \(eg: public, protected, private\))s
F1 sf
0.498 0.498 0 r
(        )30.6 354.9 ms
F0 sf
0 g
(* inherits : list of base classes)s
F1 sf
0.498 0.498 0 r
(        )30.6 344.9 ms
F0 sf
0 g
(* filename : filename where the tag is define)s
F1 sf
0 0 0.498 r
(5.13. Code tokenization)30.6 324.9 ms
F0 sf
0 g
(~)s
(When you start a completion, the current instruction is tokenized ignoring)30.6 304.9 ms
(spaces, tabs, carriage returns and comments. Thus you can complete a symbol)30.6 294.9 ms
(even if the current instruction is on multiple lines, has comments between)30.6 284.9 ms
(words etc... :)30.6 274.9 ms
(eg: this case is unrealistic but it's just for illustration >)30.6 264.9 ms
0 0.498 0.498 r
(        myObject   [ 0 ]/* Why is there a comment here ?*/)30.6 244.9 ms
(        ->_member)30.6 234.9 ms
(                ->      <C-X><C-O>)30.6 224.9 ms
0 g
(<)30.6 214.9 ms
F1 sf
0 0 0.498 r
(==============================================================================)30.6 194.9 ms
(6. Limitations)30.6 184.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                )30.6 174.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-limitations)s
F0 sf
0 g
(*)s
(Some C++ features are not supported by the script, some implemented features)30.6 164.9 ms
(may not work properly in some conditions. They are multiple reasons like a)30.6 154.9 ms
(lack of information in the database, performance issues and so on...)30.6 144.9 ms
F1 sf
0 0 0.498 r
(6.1. Attribute members and returned type completion)30.6 124.9 ms
F0 sf
0 g
(~)s
(To work properly, the completion of attribute members and returned type of)30.6 104.9 ms
(functions depends on how you write your code in the class declaration.)30.6 94.9 ms
(Because the tags database does not contain information like return type or)30.6 84.9 ms
(type of a member, the script use the cmd information of the tag to determine)30.6 74.9 ms
(the type of an attribute member or the return type of a function.)30.6 64.9 ms
(Thus, because the cmd is a regular expression \(or line number for #define\) if)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 12 12
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                             Page 12)30.6 744.9 ms
F0 sf
(you write your code like this : >)30.6 724.9 ms
0 0.498 0.498 r
(        class MyClass)30.6 704.9 ms
(        {)30.6 694.9 ms
(            public:)30.6 684.9 ms
(            )30.6 674.9 ms
(            MyOtherClass)30.6 664.9 ms
(            _member;)30.6 654.9 ms
(        };)30.6 644.9 ms
0 g
(<)30.6 634.9 ms
(The type of _member will not be recognized, because the cmd will be )30.6 624.9 ms
(/^    _member;$/ and does not contain the type MyOtherClass.)30.6 614.9 ms
(The correct case should be : >)30.6 604.9 ms
0 0.498 0.498 r
(        class MyClass)30.6 584.9 ms
(        {)30.6 574.9 ms
(            public:)30.6 564.9 ms
(            )30.6 554.9 ms
(            MyOtherClass _member;)30.6 544.9 ms
(        };)30.6 534.9 ms
0 g
(<)30.6 524.9 ms
(It's the same problem for return type of function : >)30.6 514.9 ms
0 0.498 0.498 r
(        class MyClass)30.6 494.9 ms
(        {)30.6 484.9 ms
(            public:)30.6 474.9 ms
(            )30.6 464.9 ms
(            MyOtherClass)30.6 454.9 ms
(            getOtherClass\(\); )30.6 444.9 ms
(        };)30.6 434.9 ms
0 g
(<)30.6 424.9 ms
(Here the cmd will be /^    getOtherClass\(\);$/ and the script won't find the)30.6 414.9 ms
(return type.)30.6 404.9 ms
(The correct case should be : >)30.6 394.9 ms
0 0.498 0.498 r
(        class MyClass)30.6 384.9 ms
(        {)30.6 374.9 ms
(            public:)30.6 364.9 ms
(            )30.6 354.9 ms
(            MyOtherClass getOtherClass\(\); )30.6 344.9 ms
(        };)30.6 334.9 ms
0 g
(<)30.6 324.9 ms
F1 sf
0 0 0.498 r
(6.2. Static members)30.6 304.9 ms
F0 sf
0 g
(~)s
(It's the same problem as above, tags database does not contain information)30.6 284.9 ms
(about static members. The only fast way to get this information is to use the)30.6 274.9 ms
(cmd.)30.6 264.9 ms
F1 sf
0 0 0.498 r
(6.3. Typedef)30.6 244.9 ms
F0 sf
0 g
(~)s
(It's the same problem as above, tags database does not contain information)30.6 224.9 ms
(about the type of a typedef. The script use the cmd information to resolve the)30.6 214.9 ms
(typedef.)30.6 204.9 ms
F1 sf
0 0 0.498 r
(6.4. Restricted inheritance access)30.6 184.9 ms
F0 sf
0 g
(~)s
(Tags database contains inheritance information but unfortunately inheritance )30.6 164.9 ms
(access are not available. We could use the cmd but we often find code)30.6 154.9 ms
(indentation like this : >)30.6 144.9 ms
0 0.498 0.498 r
(        )30.6 134.9 ms
(        class A :)30.6 124.9 ms
(                public B,)30.6 114.9 ms
(                protected C,)30.6 104.9 ms
(                private D)30.6 94.9 ms
(        {)30.6 84.9 ms
(        };)30.6 74.9 ms
0 g
(<)30.6 64.9 ms
(Here the cmd will be /^class A :$/, we can't extract inheritance access.)30.6 54.9 ms
re sp
%%PageTrailer
%%Page: 13 13
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                             Page 13)30.6 744.9 ms
0 0 0.498 r
(6.5. Using namespace parsing)30.6 724.9 ms
F0 sf
0 g
(~)s
(When you start a completion, using namespace declarations are parsed from the)30.6 704.9 ms
(cursor position to the first scope to detect local using namespace )30.6 694.9 ms
(declarations. After that, global using namespace declarations are parsed in the)30.6 684.9 ms
(file and included files.)30.6 674.9 ms
(There is a limitation for global using namespace detection, for performance)30.6 654.9 ms
(issues only using namespace that starts a line will be detected.)30.6 644.9 ms
F1 sf
0 0 0.498 r
(6.6. Friend classes)30.6 624.9 ms
F0 sf
0 g
(~)s
(Tags database does not contain information about friend classes. The script)30.6 604.9 ms
(does not support friend classes.)30.6 594.9 ms
F1 sf
0 0 0.498 r
(6.7. Templates)30.6 574.9 ms
F0 sf
0 g
(~)s
(At the moment, |)30.6 554.9 ms
F1 sf
0 0.498 0.498 r
(Exuberant_ctags)s
F0 sf
0 g
(| does not provide additional information for)s
(templates. That's why the script does not handle templates.)30.6 544.9 ms
F1 sf
0 0 0.498 r
(==============================================================================)30.6 524.9 ms
(7. FAQ & TIPS)30.6 514.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                                 )30.6 504.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-faq)s
F0 sf
0 g
(*)s
(* How to complete STL objects ?)30.6 484.9 ms
(    If you have some troubles to generate a good ctags database for STL you)30.6 474.9 ms
(    can try this solution :)30.6 464.9 ms
(    1\)  Download SGI's STL from SGI's site)30.6 444.9 ms
(        \(http://www.sgi.com/tech/stl/download.html\))30.6 434.9 ms
(    2\)  Replace all __STL_BEGIN_NAMESPACE by "namespace std {" and)30.6 424.9 ms
(        __STL_END_NAMESPACE by "}" from header and source files. \(with Vim,)30.6 414.9 ms
(        or with tar and sed or another tool\))30.6 404.9 ms
(    3\)  Run ctags and put the generated tags file in a directory eg:)30.6 394.9 ms
(        ~/MyTags/stl.tags)30.6 384.9 ms
(    4\)  set tags+=~/MyTags/stl.tags)30.6 374.9 ms
(    The main problem is that you can't tell to ctags that)30.6 354.9 ms
(    __STL_BEGIN_NAMESPACE = "namespace std {" even with the option -I.)30.6 344.9 ms
(    That's why you need the step 2\).)30.6 334.9 ms
(    Here is another solution if you have STL sources using _GLIBCXX_STD macro)30.6 314.9 ms
(    \(Tip by Nicola Bonelli\) : >)30.6 304.9 ms
0 0.498 0.498 r
(        let OmniCpp_DefaultNamespaces   = ["std", "_GLIBCXX_STD"])30.6 284.9 ms
0 g
(<)30.6 274.9 ms
(* How to close automatically the preview window after a completion ?)30.6 264.9 ms
(  \(Tip by Kamil Renczewski\))30.6 254.9 ms
(    You can add to your |)30.6 234.9 ms
F1 sf
0 0.498 0.498 r
(vimrc)s
F0 sf
0 g
(| the following lines : >)s
0 0.498 0.498 r
( )30.6 224.9 ms
(        autocmd CursorMovedI * if pumvisible\(\) == 0|pclose|endif)30.6 214.9 ms
(        autocmd InsertLeave * if pumvisible\(\) == 0|pclose|endif)30.6 204.9 ms
0 g
(<)30.6 194.9 ms
F1 sf
0 0 0.498 r
(==============================================================================)30.6 184.9 ms
(8. History)30.6 174.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                             )30.6 164.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-history)s
F0 sf
0 g
(*)s
(Version O.41)30.6 154.9 ms
(    -   It's recommended to update ctags to version 5.7 or higher)30.6 144.9 ms
(    -   The plugin is now activated for C files)30.6 134.9 ms
(    -   New value for OmniCpp_SelectFirstItem when the option is equal to)30.6 124.9 ms
(        2 the first item is selected without inserting it to )30.6 114.9 ms
(        the text \(patch from Marek Olszewski\))30.6 104.9 ms
(    -   Bug when completing union members fixed with ctags 5.7 )30.6 94.9 ms
(        \(reported by Willem-Jan de Hoog\) )30.6 84.9 ms
(    -   New option OmniCpp_LocalSearchDecl \(patch from Roland Kuck\))30.6 74.9 ms
(    -   Bug when tags=something,,somethingelse \(reported by Tobias Pflug\))30.6 64.9 ms
(    -   Bug with nested structure \(reported by Mikhail Daen\))30.6 54.9 ms
(    -   Bug where the script fails to detect the type of a variable when )30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 14 14
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                             Page 14)30.6 744.9 ms
F0 sf
(        the ignorecase option is on \(reported by Alexey Vakhov\))30.6 724.9 ms
(    -   Error message when trying to use completion on a not yet saved )30.6 714.9 ms
(        Vim buffer \(reported by Neil Bird\))30.6 704.9 ms
(    -   Error message when trying to use completion on an file opened from )30.6 694.9 ms
(        a tselect command \(reported by Henrique Andrade\))30.6 684.9 ms
(Version 0.4)30.6 664.9 ms
(   -   The script is renamed to OmniCppComplete according to the library)30.6 654.9 ms
(       script directory structure.        )30.6 644.9 ms
(   -   OmniCpp_ClassScopeCompletionMethod renamed to OmniCpp_DisplayMode)30.6 634.9 ms
(   -   Fixed a bug where the quickfix list is modified after a completion.)30.6 624.9 ms
(   -   OmniCpp_ShowPrototypeInAbbr option added. It allows to show the)30.6 614.9 ms
(       function signature in the abbreviation.)30.6 604.9 ms
(   -   OmniCpp_ShowAccess option added. It allows to hide the access)30.6 594.9 ms
(       information in the popup menu.)30.6 584.9 ms
(   -   The tags database format must be a ctags 5.6 database if you want to )30.6 574.9 ms
(       complete anonymous types.)30.6 564.9 ms
(   -   Fixed current scope detection not working properly in destructors.)30.6 554.9 ms
(   -   Don't show protected and private members according to the current scope. )30.6 544.9 ms
(   -   Overloaded functions are now filtered properly.)30.6 534.9 ms
(   -   New cache system using less memory.)30.6 524.9 ms
(   -   The class scope of a method is now resolved properly with "using)30.6 514.9 ms
(       namespace" declarations.)30.6 504.9 ms
(   -   OmniCpp_SelectFirstItem option added. It allows to not select the first)30.6 494.9 ms
(       item in the popup menu when )30.6 484.9 ms
F1 sf
0 0.498 0 r
('completeopt')s
F0 sf
0 g
( does not contain "longest".)s
(   -   Fixed the bug where a "random" item in the popup menu is selected)30.6 474.9 ms
(       by default when )30.6 464.9 ms
F1 sf
0 0.498 0 r
('completeopt')s
F0 sf
0 g
( does not contain "longest" option.)s
(   -   The script is now split in library scripts.)30.6 454.9 ms
(   -   Cache added for 'using namespace' search in included files)30.6 444.9 ms
(   -   Default value for OmniCpp_NamespaceSearch is now 1 \(search only in the)30.6 434.9 ms
(       current buffer\).)30.6 424.9 ms
(   -   Namespace search automatically disabled for C files even if )30.6 414.9 ms
(       OmniCpp_NamespaceSearch != 0.)30.6 404.9 ms
(   -   To avoid linear search in tags files, the ignorecase option is now )30.6 394.9 ms
(       disabled when getting tags datas \(the user setting is restored after\).)30.6 384.9 ms
(   -   Fixed a bug where friend functions may crash the script and also crash vim.)30.6 374.9 ms
(Version 0.32)30.6 354.9 ms
(   -   Optimizations in search members methods.)30.6 344.9 ms
(   -   'May complete' behaviour is now set to default for dot '.' and arrow)30.6 334.9 ms
(       '->' \(mappings are set in after/ftplugin/cpp.vim\))30.6 324.9 ms
(   -   Fixed the option CppOmni_ShowScopeInAbbr not detected after the first)30.6 314.9 ms
(       completion.)30.6 304.9 ms
(   -   Exceptions catched from taglist\(\) when a tag file is corrupted.)30.6 294.9 ms
(   -   Fixed a bug where enumerators in global scope didn't appear in the)30.6 284.9 ms
(       popup menu.)30.6 274.9 ms
(Version 0.31)30.6 254.9 ms
(   WARNING: For this release and future releases you have to build your tags )30.6 244.9 ms
(       database with this cmd :)30.6 234.9 ms
(       "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .")30.6 224.9 ms
(       Please read installation instructions in the documentation for details)30.6 214.9 ms
(   -   May complete added, please see installation notes for details.)30.6 194.9 ms
(   -   Fixed a bug where the completion works while in a comment or in a string.)30.6 184.9 ms
(Version 0.3)30.6 164.9 ms
(   WARNING: For this release and future releases you have to build your tags )30.6 154.9 ms
(       database with this cmd :)30.6 144.9 ms
(       "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .")30.6 134.9 ms
(       Please read installation instructions in the documentation for details)30.6 124.9 ms
(   -   Documentation added.)30.6 104.9 ms
(   -   Fixed a bug where typedefs were not correctly resolved in namespaces)30.6 94.9 ms
(       in some cases.)30.6 84.9 ms
(   -   Fixed a bug where the type can not be detected when we have a decl)30.6 74.9 ms
(       like this: class A {}globalVar;)30.6 64.9 ms
(   -   Fixed a bug in type detection where searchdecl\(\) \(gd\) find)30.6 54.9 ms
(       incorrect declaration instruction.)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 15 15
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                             Page 15)30.6 744.9 ms
F0 sf
(   -   Global scope completion now only works with non-empty base. )30.6 724.9 ms
(   -   Using namespace list is now parsed in the current buffer and in)30.6 714.9 ms
(       included files.)30.6 704.9 ms
(   -   Fixed a bug where the completion fails in some cases when the user)30.6 694.9 ms
(       sets the ignorecase to on)30.6 684.9 ms
(   -   Preview window information added)30.6 674.9 ms
(   -   Some improvements in type detection, the type can be properly detected)30.6 664.9 ms
(       with a declaration like this:)30.6 654.9 ms
(       'Class1 *class1A = NULL, **class1B = NULL, class1C[9], class1D[1] = {};')30.6 644.9 ms
(   -   Fixed a bug where parent scopes were not displayed in the popup menu )30.6 634.9 ms
(       in the current scope completion mode.)30.6 624.9 ms
(   -   Fixed a bug where an error message was displayed when the last)30.6 614.9 ms
(       instruction was not finished.)30.6 604.9 ms
(   -   Fixed a bug where the completion fails if a punctuator or operator was)30.6 594.9 ms
(       immediately after the cursor.)30.6 584.9 ms
(   -   The script can now detect parent contexts at the cursor position )30.6 574.9 ms
(       thanks to 'using namespace' declarations.)30.6 564.9 ms
(       It can also detect ambiguous namespaces. They are not included in )30.6 554.9 ms
(       the context list.)30.6 544.9 ms
(   -   Fixed a bug where the current scope is not properly detected when)30.6 534.9 ms
(       a file starts with a comment)30.6 524.9 ms
(   -   Fixed a bug where the type is not detected when we have myObject[0])30.6 514.9 ms
(   -   Removed the system\(\) call in SearchMembers\(\), no more calls to the)30.6 504.9 ms
(       ctags binary. The user have to build correctly his database with the cmd:)30.6 494.9 ms
(       "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .")30.6 484.9 ms
(   -   File time cache removed, the user have to rebuild his data base after a)30.6 474.9 ms
(       modification.)30.6 464.9 ms
(Version 0.22)30.6 444.9 ms
(   -   Completion of unnamed type \(eg: You can complete g_Var defined like)30.6 434.9 ms
(       this 'struct {int a; int b;}g_Var;'\). It also works for a typedef of)30.6 424.9 ms
(       an unnamed type \(eg: 'typedef struct {int a; int b;}t_mytype; t_mytype)30.6 414.9 ms
(       g_Var;'\).)30.6 404.9 ms
(   -   Tag file's time cache added, if a tag file has changed the global)30.6 394.9 ms
(       scope result cache is cleared.)30.6 384.9 ms
(   -   Fixed a bug where the tokenization process enter in an infinite loop)30.6 374.9 ms
(       when a file starts with '/*'.)30.6 364.9 ms
(Version 0.21)30.6 344.9 ms
(   -   Improvements on the global scope completion.)30.6 334.9 ms
(       The user can now see the progression of the search and complete)30.6 324.9 ms
(       matches are stored in a cache for optimization. The cache is cleared)30.6 314.9 ms
(       when the tag env is modified.)30.6 304.9 ms
(   -   Within a class scope when the user complete an empty word, the popup)30.6 294.9 ms
(       menu displays the members of the class then members of the global)30.6 284.9 ms
(       scope.)30.6 274.9 ms
(   -   Fixed a bug where a current scope completion failed after a punctuator)30.6 264.9 ms
(       or operator \(eg: after a '=' or '!='\).)30.6 254.9 ms
(Version 0.2)30.6 234.9 ms
(   -   Improvements in type detection \(eg: when a variable is declared in a)30.6 224.9 ms
(       parameter list, a catch clause, etc...\))30.6 214.9 ms
(   -   Code tokenization => ignoring spaces, tabs, carriage returns and comments)30.6 204.9 ms
(       You can complete a code even if the instruction has bad)30.6 194.9 ms
(       indentation, spaces or carriage returns between words)30.6 184.9 ms
(   -   Completion of class members added)30.6 174.9 ms
(   -   Detection of the current scope at the cursor position.)30.6 164.9 ms
(       If you run a completion from en empty line, members of the current)30.6 154.9 ms
(       scope are displayed. It works on the global namespace and the current)30.6 144.9 ms
(       class scope \(but there is not the combination of the 2 for the moment\))30.6 134.9 ms
(   -   Basic completion on the global namespace \(very slow\))30.6 124.9 ms
(   -   Completion of returned type added)30.6 114.9 ms
(   -   this pointer completion added)30.6 104.9 ms
(   -   Completion after a cast added \(C and C++ cast\))30.6 94.9 ms
(   -   Fixed a bug where the matches of the complete menu are not filtered)30.6 84.9 ms
(       according to what the user typed)30.6 74.9 ms
(   -   Change the output of the popup menu. The type of the member)30.6 64.9 ms
(       \(function, member, enum etc...\) is now display as a single letter.)30.6 54.9 ms
(       The access information is display like this : '+' for a public member)30.6 44.9 ms
re sp
%%PageTrailer
%%Page: 16 16
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(doc/omnicppcomplete.txt                                                             Page 16)30.6 744.9 ms
F0 sf
(       '#' for a protected member and '-' for a private member.)30.6 724.9 ms
(       The last information is the class, namespace or enum where the member is define.)30.6 714.9 ms
(Version 0.12:)30.6 694.9 ms
(   -   Complete check added to the search process, you can now cancel)30.6 684.9 ms
(       the search during a complete search.)30.6 674.9 ms
(   )30.6 664.9 ms
(Version 0.1:)30.6 654.9 ms
(   -   First release)30.6 644.9 ms
F1 sf
0 0 0.498 r
(==============================================================================)30.6 624.9 ms
(9. Thanks)30.6 614.9 ms
F0 sf
0 g
(~)s
F1 sf
0.498 0.498 0 r
(                                                              )30.6 604.9 ms
F0 sf
0 g
(*)s
F1 sf
0.498 0 0.498 r
(omnicpp-thanks)s
F0 sf
0 g
(*)s
F1 sf
0.498 0.498 0 r
(        )30.6 594.9 ms
F0 sf
0 g
(* For advices, bug report, documentation, help, ideas :)s
(                Alexey Vakhov                   \(bug report\))30.6 584.9 ms
(                Arthur Axel "fREW" Schmidt      \(documentation\))30.6 574.9 ms
(                Dennis Lubert                   \(bug report\))30.6 564.9 ms
(                Henrique Andrade                \(bug report\) )30.6 554.9 ms
(                Kamil Renczewski                \(tips\))30.6 544.9 ms
(                Marek Olszewski                 \(patch\))30.6 534.9 ms
(                Markus Trenkwalder              \(bug report\))30.6 524.9 ms
(                Martin Stubenschrott            \(bug report\))30.6 514.9 ms
(                Mikhail Daen                    \(bug report\) )30.6 504.9 ms
(                Neil Bird                       \(bug report\) )30.6 494.9 ms
(                Nicola Bonelli                  \(tips\))30.6 484.9 ms
(                Robert Webb                     \(bug report\))30.6 474.9 ms
(                Roland Kuck                     \(patch\) )30.6 464.9 ms
(                Tobias Pflug                    \(bug report\) )30.6 454.9 ms
(                Willem-Jan de Hoog              \(bug report\))30.6 444.9 ms
(                Yegappan Lakshmanan             \(advices\))30.6 434.9 ms
(                )30.6 424.9 ms
(            )30.6 414.9 ms
F1 sf
0.498 0.498 0 r
(        )30.6 404.9 ms
F0 sf
0 g
(* Darren Hiebert for Exuberant Ctags)s
F1 sf
0.498 0.498 0 r
(        )30.6 384.9 ms
F0 sf
0 g
(* All Vim devs for Vim)s
(        )30.6 374.9 ms
F1 sf
0.498 0.498 0 r
(        )30.6 364.9 ms
F0 sf
0 g
(* Bram Moolenaar for Vim)s
(        )30.6 354.9 ms
F1 sf
0.498 0.498 0 r
(        )30.6 344.9 ms
F0 sf
0 g
(* You for using this script :\))s
F1 sf
0 0 0.498 r
(==============================================================================)30.6 324.9 ms
F0 sf
0 g
( vim:tw=78:fo=tcq2:isk=!-~,^*,^\\|,^\\":ts=8:ft=help:norl:)30.6 304.9 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 16
%%EOF
